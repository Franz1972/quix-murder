##################################
# Quixotic Murder
# 00_quix_murder_effects.txt
# Version:alpha1
# by El Ingenioso Caballero Don Quixote de la Mancha
# https://DonQuixote.Games/
##################################


set_bodyguard_effect = {
	$BODYGUARD$ = { custom_tooltip = set_bodyguard_effect.tt }

	$EMPLOYER$ = {
		hidden_effect = { set_relation_bodyguard = $BODYGUARD$ }

		every_relation = {
			type = bodyguard
			limit = { NOT = { this = $BODYGUARD$ } }

			save_temporary_scope_as = old_bodyguard
			fire_bodyguard_effect = {
				BODYGUARD = scope:old_bodyguard
				EMPLOYER = $EMPLOYER$
			}
		}

		#Trigger treatments if needed
		hidden_effect = {


		}
	}
	
	#In case we saved someone who shouldn't be a court bodyguard (must be done this way rather than wrapping everything in an if for tooltip reasons when BODYGUARD isn't your courtier yet)
	invalidate_bodyguard_effect = {
		BODYGUARD = $BODYGUARD$
		EMPLOYER = $EMPLOYER$
	}
}

fire_bodyguard_effect = {
	$BODYGUARD$ = { custom_tooltip = fire_bodyguard_effect.tt }
	$EMPLOYER$ = {
		if = {
			limit = {
				has_relation_bodyguard = $BODYGUARD$
			}
			hidden_effect = { remove_relation_bodyguard = $BODYGUARD$ }

			reverse_add_opinion = {
				target = $BODYGUARD$
				modifier = disappointed_opinion
				opinion = -15
			}
		}
	}
}

invalidate_bodyguard_effect = {
	hidden_effect = {
		if = {
			limit = {
				NOT = { $BODYGUARD$ = { can_be_bodyguard_of = { EMPLOYER = $EMPLOYER$ } } }
			}
			$BODYGUARD$ = { save_scope_as = invalidated_bodyguard }
			$EMPLOYER$ = {
				send_interface_message = {
					type = event_bodyguard_bad
					title = invalidate_bodyguard_effect.t
					left_icon = scope:invalidated_bodyguard
					remove_relation_bodyguard = $BODYGUARD$
				}
			}
		}
	}
}

save_bodyguard_as_effect = {
	hidden_effect = {
		if = { 	
			limit = { exists = court_owner }
			court_owner = {
				save_temporary_scope_as = save_bodyguard_employer
				every_relation = {
					type = bodyguard
					save_temporary_scope_as = save_bodyguard_bodyguard
					invalidate_bodyguard_effect = {
						BODYGUARD = scope:save_bodyguard_bodyguard
						EMPLOYER = scope:save_bodyguard_employer
					}
				}
				random_relation = {
					type = bodyguard
					save_scope_as = $SCOPE_NAME$
				}
			}
		}
	}
}

###COURT BODYGUARD RANK UP###

bodyguard_rank_up_tooltip_effect = {
	scope:bodyguard = {
		if = {
			limit = {
				exists = var:bodyguard_level_up
			}
			show_as_tooltip = {
				if = {
					limit = { var:bodyguard_level_up = flag:bodyguard }
					if = {
						limit = { has_trait = bodyguard_1 }
						add_trait_force_tooltip = bodyguard_1
					}
					else_if = {
						limit = { has_trait = bodyguard_2 }
						add_trait_force_tooltip = bodyguard_2
					}
					else_if = {
						limit = { has_trait = bodyguard_3 }
						add_trait_force_tooltip = bodyguard_3
					}
				}
				else_if = {
					limit = { var:bodyguard_level_up = flag:mystic }
					if = {
						limit = { has_trait = mystic_1 }
						add_trait_force_tooltip = mystic_1
					}
					else_if = {
						limit = { has_trait = mystic_2 }
						add_trait_force_tooltip = mystic_2
					}
					else_if = {
						limit = { has_trait = mystic_3 }
						add_trait_force_tooltip = mystic_3
					}
				}
			}
		}
	}
}

#Needs argument CHANCE
bodyguard_level_up_chance_effect = {
	if = {
		limit = {
			NOT = { has_trait = bodyguard_3 }
			is_alive = yes
		}
		random = {
			chance = $CHANCE$
			bodyguard_lifestyle_rank_up_effect = yes

			#Used by bodyguard_rank_up_tooltip_effect, to be shown in treatment outcome...
			set_variable = { name = bodyguard_level_up value = flag:bodyguard days = 15 }

			#...or in notification
			if = {
				limit = {
					exists = liege
					liege = { NOT = { this = scope:sick_character } }
				}
				liege = {
					send_interface_message = { #Should be feed message, because it's not hugely important
						type = event_bodyguard_good
						title = bodyguard_level_up_chance_effect.t
						left_icon = scope:bodyguard
						bodyguard_rank_up_tooltip_effect = yes
					}
				}
			}
		}
	}
}
